}
return(plot)
}
CreatePlots <- function(DataSet, PlotType) {
if (PlotType=="dailyS1") {
plot <- ggplot(data=DataSet,
aes(x=Date, y=Sub1, group=1)) +
geom_line(color="red")
}
if (PlotType=="dailyS2") {
plot <- ggplot(data=DataSet,
aes(x=Date, y=Sub1, group=1)) +
geom_line(color="blue")
}
if (PlotType=="dailyS3") {
plot <- ggplot(data=DataSet,
aes(x=Date, y=Sub1, group=1)) +
geom_line(color="green")
}
if (PlotType=="monthlyS1") {
DataSet$yearmonth <- as.character(DataSet$yearmonth)
plot <- ggplot(data=DataSet,
aes(x=yearmonth, y=Sub1, group=1)) +
geom_line(color="green")
}
if (PlotType=="monthlyS2") {
DataSet$yearmonth <- as.character(DataSet$yearmonth)
plot <- ggplot(data=DataSet,
aes(x=yearmonth, y=Sub2, group=1)) +
geom_line(color="green")
}
if (PlotType=="monthlyS3") {
DataSet$yearmonth <- as.character(DataSet$yearmonth)
plot <- ggplot(data=DataSet,
aes(x=yearmonth, y=Sub3, group=1)) +
geom_line(color="green")
}
if (PlotType=="monthlyTot") {
DataSet$yearmonth <- as.character(DataSet$yearmonth)
plot <- ggplot(data=DataSet,
aes(x=yearmonth, group=1)) +
geom_line(aes(y=Active_whm),color="green") +
geom_line(aes(y=Other_whm),color="red") +
geom_line(aes(y=Active_whm-Other_whm),color="blue")
}
if (PlotType=="monthlyTotDaily") {
DataSet$yearmonth <- as.character(DataSet$yearmonth)
plot <- ggplot(data=DataSet,
aes(x=yearmonth, group=1)) +
geom_line(aes(y=Active_whm),color="green") +
geom_line(aes(y=Active_Daily*30),color="blue")
}
if (PlotType=="weekdayS1") {
plot <- ggplot(data=DataSet,
aes(x=WD,y = Sub1,
fill=factor(ifelse(WD=="zo" | WD=="za","Weekend","Weekday")))) +
geom_bar(stat = "identity") +
scale_fill_manual(name = "part of week", values=c("grey50", "red"))
}
if (PlotType=="minuteS2") {
plot <- ggplot(data=DataSet %>% filter(Date>="2007-02-17" & Date <= "2007-02-17") ,
aes(x=DateTime, y=Sub2)) +
geom_line(color="red")
}
if (PlotType=="minuteS3") {
plot <- ggplot(data=DataSet %>% filter(Date>="2007-02-17" & Date <= "2007-02-17") ,
aes(x=DateTime, y=Sub3)) +
geom_line(color="red")
}
if (PlotType=="monthlyS3_2009") {
DataSet$yearmonth <- as.character(DataSet$yearmonth)
plot <- ggplot(data=DataSet %>% filter(year==2009),
aes(x=yearmonth, y=Sub3, group=1)) +
geom_line(color="green")
}
return(plot)
}
CreatePlots(TotalMinuteData, "minuteS2")
FullMinutes <- TotalMinuteData %>% filter(Date>"2010-07-31" & Date<"2010-07-08")
minute_S3_TS %>%
stl(t.window=10800, s.window="periodic", robust=TRUE) %>%
autoplot()
minute_S3_TS
FullMinutes <- TotalMinuteData %>% filter(Date>"2010-07-31" & Date<"2010-08-08")
minute_S3_TS <- ts(FullMinutes$Sub3,frequency=1440)
minute_S3_TS %>%
stl(t.window=10800, s.window="periodic", robust=TRUE) %>%
autoplot()
plot <- ggplot(data=DataSet %>% filter(Date>="2007-06-17" & Date <= "2007-06-17") ,
aes(x=DateTime, y=Sub2)) +
geom_line(color="red")
CreatePlots <- function(DataSet, PlotType) {
if (PlotType=="dailyS1") {
plot <- ggplot(data=DataSet,
aes(x=Date, y=Sub1, group=1)) +
geom_line(color="red")
}
if (PlotType=="dailyS2") {
plot <- ggplot(data=DataSet,
aes(x=Date, y=Sub1, group=1)) +
geom_line(color="blue")
}
if (PlotType=="dailyS3") {
plot <- ggplot(data=DataSet,
aes(x=Date, y=Sub1, group=1)) +
geom_line(color="green")
}
if (PlotType=="monthlyS1") {
DataSet$yearmonth <- as.character(DataSet$yearmonth)
plot <- ggplot(data=DataSet,
aes(x=yearmonth, y=Sub1, group=1)) +
geom_line(color="green")
}
if (PlotType=="monthlyS2") {
DataSet$yearmonth <- as.character(DataSet$yearmonth)
plot <- ggplot(data=DataSet,
aes(x=yearmonth, y=Sub2, group=1)) +
geom_line(color="green")
}
if (PlotType=="monthlyS3") {
DataSet$yearmonth <- as.character(DataSet$yearmonth)
plot <- ggplot(data=DataSet,
aes(x=yearmonth, y=Sub3, group=1)) +
geom_line(color="green")
}
if (PlotType=="monthlyTot") {
DataSet$yearmonth <- as.character(DataSet$yearmonth)
plot <- ggplot(data=DataSet,
aes(x=yearmonth, group=1)) +
geom_line(aes(y=Active_whm),color="green") +
geom_line(aes(y=Other_whm),color="red") +
geom_line(aes(y=Active_whm-Other_whm),color="blue")
}
if (PlotType=="monthlyTotDaily") {
DataSet$yearmonth <- as.character(DataSet$yearmonth)
plot <- ggplot(data=DataSet,
aes(x=yearmonth, group=1)) +
geom_line(aes(y=Active_whm),color="green") +
geom_line(aes(y=Active_Daily*30),color="blue")
}
if (PlotType=="weekdayS1") {
plot <- ggplot(data=DataSet,
aes(x=WD,y = Sub1,
fill=factor(ifelse(WD=="zo" | WD=="za","Weekend","Weekday")))) +
geom_bar(stat = "identity") +
scale_fill_manual(name = "part of week", values=c("grey50", "red"))
}
if (PlotType=="minuteS2") {
plot <- ggplot(data=DataSet %>% filter(Date>="2007-06-17" & Date <= "2007-06-17") ,
aes(x=DateTime, y=Sub2)) +
geom_line(color="red")
}
if (PlotType=="minuteS3") {
plot <- ggplot(data=DataSet %>% filter(Date>="2007-02-17" & Date <= "2007-02-17") ,
aes(x=DateTime, y=Sub3)) +
geom_line(color="red")
}
if (PlotType=="monthlyS3_2009") {
DataSet$yearmonth <- as.character(DataSet$yearmonth)
plot <- ggplot(data=DataSet %>% filter(year==2009),
aes(x=yearmonth, y=Sub3, group=1)) +
geom_line(color="green")
}
return(plot)
}
CreatePlots(TotalMinuteData, "minuteS2")
plot <- ggplot(data=DataSet %>% filter(Date>="2008-06-08" & Date <= "2008-06-08") ,
aes(x=DateTime, y=Sub2)) +
geom_line(color="red")
CreatePlots <- function(DataSet, PlotType) {
if (PlotType=="dailyS1") {
plot <- ggplot(data=DataSet,
aes(x=Date, y=Sub1, group=1)) +
geom_line(color="red")
}
if (PlotType=="dailyS2") {
plot <- ggplot(data=DataSet,
aes(x=Date, y=Sub1, group=1)) +
geom_line(color="blue")
}
if (PlotType=="dailyS3") {
plot <- ggplot(data=DataSet,
aes(x=Date, y=Sub1, group=1)) +
geom_line(color="green")
}
if (PlotType=="monthlyS1") {
DataSet$yearmonth <- as.character(DataSet$yearmonth)
plot <- ggplot(data=DataSet,
aes(x=yearmonth, y=Sub1, group=1)) +
geom_line(color="green")
}
if (PlotType=="monthlyS2") {
DataSet$yearmonth <- as.character(DataSet$yearmonth)
plot <- ggplot(data=DataSet,
aes(x=yearmonth, y=Sub2, group=1)) +
geom_line(color="green")
}
if (PlotType=="monthlyS3") {
DataSet$yearmonth <- as.character(DataSet$yearmonth)
plot <- ggplot(data=DataSet,
aes(x=yearmonth, y=Sub3, group=1)) +
geom_line(color="green")
}
if (PlotType=="monthlyTot") {
DataSet$yearmonth <- as.character(DataSet$yearmonth)
plot <- ggplot(data=DataSet,
aes(x=yearmonth, group=1)) +
geom_line(aes(y=Active_whm),color="green") +
geom_line(aes(y=Other_whm),color="red") +
geom_line(aes(y=Active_whm-Other_whm),color="blue")
}
if (PlotType=="monthlyTotDaily") {
DataSet$yearmonth <- as.character(DataSet$yearmonth)
plot <- ggplot(data=DataSet,
aes(x=yearmonth, group=1)) +
geom_line(aes(y=Active_whm),color="green") +
geom_line(aes(y=Active_Daily*30),color="blue")
}
if (PlotType=="weekdayS1") {
plot <- ggplot(data=DataSet,
aes(x=WD,y = Sub1,
fill=factor(ifelse(WD=="zo" | WD=="za","Weekend","Weekday")))) +
geom_bar(stat = "identity") +
scale_fill_manual(name = "part of week", values=c("grey50", "red"))
}
if (PlotType=="minuteS2") {
plot <- ggplot(data=DataSet %>% filter(Date>="2008-06-08" & Date <= "2008-06-08") ,
aes(x=DateTime, y=Sub2)) +
geom_line(color="red")
}
if (PlotType=="minuteS3") {
plot <- ggplot(data=DataSet %>% filter(Date>="2007-02-17" & Date <= "2007-02-17") ,
aes(x=DateTime, y=Sub3)) +
geom_line(color="red")
}
if (PlotType=="monthlyS3_2009") {
DataSet$yearmonth <- as.character(DataSet$yearmonth)
plot <- ggplot(data=DataSet %>% filter(year==2009),
aes(x=yearmonth, y=Sub3, group=1)) +
geom_line(color="green")
}
return(plot)
}
CreatePlots(TotalMinuteData, "minuteS2")
CreatePlots <- function(DataSet, PlotType) {
if (PlotType=="dailyS1") {
plot <- ggplot(data=DataSet,
aes(x=Date, y=Sub1, group=1)) +
geom_line(color="red")
}
if (PlotType=="dailyS2") {
plot <- ggplot(data=DataSet,
aes(x=Date, y=Sub1, group=1)) +
geom_line(color="blue")
}
if (PlotType=="dailyS3") {
plot <- ggplot(data=DataSet,
aes(x=Date, y=Sub1, group=1)) +
geom_line(color="green")
}
if (PlotType=="monthlyS1") {
DataSet$yearmonth <- as.character(DataSet$yearmonth)
plot <- ggplot(data=DataSet,
aes(x=yearmonth, y=Sub1, group=1)) +
geom_line(color="green")
}
if (PlotType=="monthlyS2") {
DataSet$yearmonth <- as.character(DataSet$yearmonth)
plot <- ggplot(data=DataSet,
aes(x=yearmonth, y=Sub2, group=1)) +
geom_line(color="green")
}
if (PlotType=="monthlyS3") {
DataSet$yearmonth <- as.character(DataSet$yearmonth)
plot <- ggplot(data=DataSet,
aes(x=yearmonth, y=Sub3, group=1)) +
geom_line(color="green")
}
if (PlotType=="monthlyTot") {
DataSet$yearmonth <- as.character(DataSet$yearmonth)
plot <- ggplot(data=DataSet,
aes(x=yearmonth, group=1)) +
geom_line(aes(y=Active_whm),color="green") +
geom_line(aes(y=Other_whm),color="red") +
geom_line(aes(y=Active_whm-Other_whm),color="blue")
}
if (PlotType=="monthlyTotDaily") {
DataSet$yearmonth <- as.character(DataSet$yearmonth)
plot <- ggplot(data=DataSet,
aes(x=yearmonth, group=1)) +
geom_line(aes(y=Active_whm),color="green") +
geom_line(aes(y=Active_Daily*30),color="blue")
}
if (PlotType=="weekdayS1") {
plot <- ggplot(data=DataSet,
aes(x=WD,y = Sub1,
fill=factor(ifelse(WD=="zo" | WD=="za","Weekend","Weekday")))) +
geom_bar(stat = "identity") +
scale_fill_manual(name = "part of week", values=c("grey50", "red"))
}
if (PlotType=="minuteS2") {
plot <- ggplot(data=DataSet %>% filter(Date>="2009-06-08" & Date <= "2009-06-08") ,
aes(x=DateTime, y=Sub2)) +
geom_line(color="red")
}
if (PlotType=="minuteS3") {
plot <- ggplot(data=DataSet %>% filter(Date>="2007-02-17" & Date <= "2007-02-17") ,
aes(x=DateTime, y=Sub3)) +
geom_line(color="red")
}
if (PlotType=="monthlyS3_2009") {
DataSet$yearmonth <- as.character(DataSet$yearmonth)
plot <- ggplot(data=DataSet %>% filter(year==2009),
aes(x=yearmonth, y=Sub3, group=1)) +
geom_line(color="green")
}
return(plot)
}
minute_S3_TS %>%
mstl(t.window=10800, s.window="periodic", robust=TRUE) %>%
autoplot()
FullMinutes <- TotalMinuteData %>% filter(Date>"2010-07-01" & Date<"2010-08-08")
minute_S3_TS <- ts(FullMinutes$Sub3,frequency=1440)
minute_S3_TS %>%
mstl(t.window=10800, s.window="periodic", robust=TRUE) %>%
autoplot()
runApp('Shinyapp03.R')
runApp('Shinyapp03.R')
runApp('Shinyapp03.R')
runApp('Shinyapp03.R')
runApp('Shinyapp03.R')
runApp('Shinyapp03.R')
runApp('Shinyapp03.R')
str(dailyData)
saveRDS(dailyData, file = "DailyData.rds")
runApp('Shinyapp03.R')
runApp('Shinyapp03.R')
runApp('Shinyapp03.R')
runApp('Shinyapp03.R')
MonthlyPredict
FC_Monthly_DF
FC_Monthly_TS <- FC_M$mean #Convert forecast to TS
FC_Monthly_DF <- data.frame(energy = c(FC_Monthly_TS), month = c(time(FC_Monthly_TS)))
FC_Monthly_DF$year <- FC_Monthly_DF$month - FC_Monthly_DF$month%%1
FC_Monthly_DF$month <- round((FC_Monthly_DF$month%%1) * 12,0)+1
FC_Monthly_DF$monthname <- as.character(month(ymd(010101) + months(FC_Monthly_DF$month-1),
label=TRUE,
abbr=TRUE))
FC_Monthly_DF$MonthDays <- with(FC_Monthly_DF, ifelse(month %in% c(1, 3, 5, 7, 8, 10, 12),31,
ifelse(month %in% c(4,6,9,11),30,
ifelse(year==2008,29,28))))
FC_Monthly_DF$monthCost <- with(FC_Monthly_DF, energy * MonthDays / 1000 *0.17 )
FC_Monthly_DF
MonthlyActual <- monthlyData %>%
filter(year==2010) %>%
ungroup() %>%
select(month,monthname, monthCost )
MonthlyActual$Period <- "Spend"
MonthlyPredict <- FC_Monthly_DF %>% select(month, monthname, monthCost)
MonthlyPredict$Period <- "Expected"
#correction on current month for already used energy
CurrentMonthUsed <- as.numeric(MonthlyActual %>%
filter(month==11) %>%
ungroup() %>%
select(monthCost ))
MonthlyPredict$monthCost <- with(MonthlyPredict, ifelse(month==11, monthCost - CurrentMonthUsed, monthCost))
MonthlyCost <- rbind(MonthlyActual, MonthlyPredict)
# Create RDS files to use in the dashboard
saveRDS(MonthlyCost, file = "MonthlyCost.rds")
runApp('Shinyapp03.R')
MonthlyActual <- monthlyData %>%
filter(year==2010) %>%
ungroup() %>%
select(month,monthname, monthCost )
MonthlyActual$Period <- "Spend"
MonthlyPredict <- FC_Monthly_DF %>% select(month, monthname, monthCost)
MonthlyPredict$Period <- "Expected"
MonthlyTotal <- MonthlyPredict
MonthlyTotal <- "TotalFC"
#correction on current month for already used energy
CurrentMonthUsed <- as.numeric(MonthlyActual %>%
filter(month==11) %>%
ungroup() %>%
select(monthCost ))
MonthlyPredict$monthCost <- with(MonthlyPredict, ifelse(month==11, monthCost - CurrentMonthUsed, monthCost))
MonthlyCost <- rbind(MonthlyActual, MonthlyPredict, MonthlyTotal)
# Create RDS files to use in the dashboard
saveRDS(MonthlyCost, file = "MonthlyCost.rds")
MonthlyActual <- monthlyData %>%
filter(year==2010) %>%
ungroup() %>%
select(month,monthname, monthCost )
MonthlyActual$Period <- "Spend"
MonthlyPredict <- FC_Monthly_DF %>% select(month, monthname, monthCost)
MonthlyPredict$Period <- "Expected"
MonthlyTotal <- MonthlyPredict
MonthlyTotal$Period <- "TotalFC"
#correction on current month for already used energy
CurrentMonthUsed <- as.numeric(MonthlyActual %>%
filter(month==11) %>%
ungroup() %>%
select(monthCost ))
MonthlyPredict$monthCost <- with(MonthlyPredict, ifelse(month==11, monthCost - CurrentMonthUsed, monthCost))
MonthlyCost <- rbind(MonthlyActual, MonthlyPredict, MonthlyTotal)
# Create RDS files to use in the dashboard
saveRDS(MonthlyCost, file = "MonthlyCost.rds")
runApp('Shinyapp03.R')
runApp('Shinyapp03.R')
FC_M
FC_Monthly
FC_M$mean
FC_Monthly <- snaive(monthlyTS_Real, h=FC_Period)
FC_Monthly
FC_Monthly_TS <- FC_Monthly$mean
CreateMonthlyOutputFormat <- function(FC_Monthly, monthlyData){
FC_Monthly_TS <- FC_Monthly$mean #Convert forecast to TS
FC_Monthly_DF <- data.frame(energy = c(FC_Monthly_TS), month = c(time(FC_Monthly_TS)))
FC_Monthly_DF$year <- FC_Monthly_DF$month - FC_Monthly_DF$month%%1
FC_Monthly_DF$month <- round((FC_Monthly_DF$month%%1) * 12,0)+1
FC_Monthly_DF$monthname <- as.character(month(ymd(010101) + months(FC_Monthly_DF$month-1),
label=TRUE,
abbr=TRUE))
FC_Monthly_DF$MonthDays <- with(FC_Monthly_DF, ifelse(month %in% c(1, 3, 5, 7, 8, 10, 12),31,
ifelse(month %in% c(4,6,9,11),30,
ifelse(year==2008,29,28))))
FC_Monthly_DF$monthCost <- with(FC_Monthly_DF, energy * MonthDays / 1000 *0.17 )
# Add actual consumption in output format
MonthlyActual <- monthlyData %>%
filter(year==2010) %>%
ungroup() %>%
select(month,monthname, monthCost )
MonthlyActual$Period <- "Spend"
# Predictions in output format
MonthlyPredict <- FC_Monthly_DF %>% select(month, monthname, monthCost)
MonthlyPredict$Period <- "Expected"
# Total consumption in output format
MonthlyTotal <- MonthlyPredict
MonthlyTotal$Period <- "TotalFC"
# Make correction on current month's Prediction for already used energy
CurrentMonthUsed <- as.numeric(MonthlyActual %>%
filter(month==11) %>%
ungroup() %>%
select(monthCost ))
MonthlyPredict$monthCost <- with(MonthlyPredict, ifelse(month==11, monthCost - CurrentMonthUsed, monthCost))
# combine data
MonthlyCost <- rbind(MonthlyActual, MonthlyPredict, MonthlyTotal)
return(MonthlyCost)
}
FC_Monthly <- snaive(monthlyTS_Real, h=FC_Period)
MonthlyCost <- CreateMonthlyOutputFormat(FC_Monthly, monthlyData)
MonthlyCost
FullDays <- monthlyData %>%  filter(Date>"2006-12-27" & Date<"2010-11-26")
Daily_TS <- ts(FullDays$Active_Daily,frequency = 7)
FullDays <- dailyData %>%  filter(Date>"2006-12-27" & Date<"2010-11-26")
Daily_TS <- ts(FullDays$Active_Daily,frequency = 7)
FullDays
monthlyTS
FullMonths
FullDays
Daily_TS <- ts(FullDays$Active_whm,frequency = 7)
FC_Period_Daily <- 5
FC_Daily <- snaive(Daily_TS, h=FC_Period_Daily)
FC_Period_Daily <- 36
FC_Daily <- snaive(Daily_TS, h=FC_Period_Daily)
FC_Daily
FC_Daily_TS <- FC_Daily$mean
FC_Daily_TS
FC_Daily_DF <- data.frame(energy = c(FC_Daily_TS), day = c(time(FC_Daily_TS)))
FC_Daily_DF
FC_Daily_DF$day - FC_Daily_DF$day%%1
FC_Daily_DF$day - FC_Daily_DF$day%%1-204
round((FC_Daily_DF$day%%1) * 7,0)+1
round((FC_Daily_DF$day%%1) * 7,0)
round((FC_Daily_DF$day%%1) * 7,0)+1
ymd("2010-11-25")+2
FC_Daily_DF$week <- FC_Daily_DF$day - FC_Daily_DF$day%%1-204
FC_Daily_DF$dayNr <- (FC_Daily_DF$week-1)*7+ round((FC_Daily_DF$day%%1) * 7,0)+1
FC_Daily_DF$dayNr
FC_Daily_DF$dayNr <- (FC_Daily_DF$week-1)*7+ round((FC_Daily_DF$day%%1) * 7,0)
FC_Daily_DF$dayNr
FC_Daily_DF$Date <- ymd("2010-11-25") + FC_Daily_DF$daynr
FC_Daily_DF$Date <- ymd("2010-11-25") + FC_Daily_DF$daynr
FC_Daily_DF$daynr
FC_Daily_DF$dayNr
FC_Daily_DF$Date <- ymd("2010-11-25") + FC_Daily_DF$dayNr
FC_Daily_DF
DailyActual <- FullDays
str(FullDays)
DailyActual <- FullDays %>% select(Date, Active_whm,0)
FC_Daily_DF <- data.frame(forecast = c(FC_Daily_TS), day = c(time(FC_Daily_TS)))
FC_Daily_DF$week <- FC_Daily_DF$day - FC_Daily_DF$day%%1-204
FC_Daily_DF$dayNr <- (FC_Daily_DF$week-1)*7+ round((FC_Daily_DF$day%%1) * 7,0)
FC_Daily_DF$Date <- ymd("2010-11-25") + FC_Daily_DF$dayNr
FC_Daily_DF
FC_Daily_DF$Active_whm <- 0
DailyActual <- FullDays %>% select(Date, Active_whm)
DailyActual$forecast <-0
FC_Daily_DF <- data.frame(Future = c(FC_Daily_TS), day = c(time(FC_Daily_TS)))
FC_Daily_DF$week <- FC_Daily_DF$day - FC_Daily_DF$day%%1-204
FC_Daily_DF$dayNr <- (FC_Daily_DF$week-1)*7+ round((FC_Daily_DF$day%%1) * 7,0)
FC_Daily_DF$Date <- ymd("2010-11-25") + FC_Daily_DF$dayNr
FC_Daily_DF$Active_whm <- 0 # set active to 0. required for output
DailyActual <- FullDays %>% select(Date, Active_whm)
DailyActual$Future <-0
str(FullDays)
DailyActual <- FullDays %>%
filter(year(Date)==2010) %>%
select(Date, Active_whm)
DailyActual$Future <-0
DailyPredict <- FC_Daily_DF %>%
select(Date, Active_whm, Future)
Daily2010 <- rbind(DailyActual, DailyPredict)
